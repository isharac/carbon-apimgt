/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.apimgt.lifecycle.manager.sql.dao;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.beans.LifecycleHistoryBean;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.beans.LifecycleStateBean;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.config.LifecycleConfigBuilder;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.constants.Constants;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.exception.LifecycleManagerDatabaseException;
import org.wso2.carbon.apimgt.lifecycle.manager.sql.utils.LifecycleMgtDBUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;


/**
 * This class represent the DAO layer for lifecycle related operations.
 */
public class LifecycleMgtDAO {

    private static final Logger log = LoggerFactory.getLogger(LifecycleMgtDAO.class);

    private LifecycleMgtDAO() {

    }

    /**
     * Method to get the instance of the LCMgtDAO.
     *
     * @return {@link LifecycleMgtDAO} instance
     */
    public static LifecycleMgtDAO getInstance() {
        return LCMgtDAOHolder.INSTANCE;
    }

    /**
     * Set initial lifecycle state.
     *
     * @param initialState                          Initial state provided in lifecycle config.
     * @param lcName                                Name of the lifecycle
     * @param user                                  The user who invoked the action. This will be used for
     *                                              auditing purposes.
     * @return                                      UUID generated by framework which is stored as reference by
     *                                              external systems.
     * @throws LifecycleManagerDatabaseException    If failed to add initial lifecycle state.
     */
    public String addLifecycleState(String initialState, String lcName, String user)
            throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        String uuid = null;
        final String addLifecycleStateSql = "INSERT INTO LC_DATA (LC_STATE_ID,LC_NAME,LC_STATUS) VALUES (?,?,?)";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            connection.setAutoCommit(false);

            uuid = generateUUID();
            prepStmt = connection.prepareStatement(addLifecycleStateSql);
            prepStmt.setString(1, uuid);
            prepStmt.setString(2, lcName);
            prepStmt.setString(3, initialState);
            prepStmt.execute();
            connection.commit();
            addLifecycleHistory(uuid, null, initialState, user);

        } catch (SQLException e) {
            uuid = null;
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for setting initial lifecycle state :" + initialState, e);
            }
            handleException("Error while associating the lifecycle " + lcName, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, null);
        }
        return uuid;
    }

    /**
     * Change lifecycle state.
     *
     * @param lifecycleStateBean                    Bean containing lifecycle id and required state.
     * @param user                                  The user who invoked the action. This will be used for
     *                                              auditing purposes.
     * @throws LifecycleManagerDatabaseException    If failed to change lifecycle state.
     */
    public void changeLifecycleState(LifecycleStateBean lifecycleStateBean, String user)
            throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        final String updateLifecycleStateSql = "UPDATE LC_DATA SET LC_STATUS=? WHERE LC_STATE_ID=? ";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            connection.setAutoCommit(false);
            prepStmt = connection.prepareStatement(updateLifecycleStateSql);
            prepStmt.setString(1, lifecycleStateBean.getPostStatus());
            prepStmt.setString(2, lifecycleStateBean.getStateId());
            prepStmt.executeUpdate();
            connection.commit();
            addLifecycleHistory(lifecycleStateBean.getStateId(), lifecycleStateBean.getPreviousStatus(),
                    lifecycleStateBean.getPostStatus(), user);

        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for lifecycle state change :" + lifecycleStateBean
                        .getPostStatus(), e);
            }
            handleException("Error while changing the lifecycle state to " + lifecycleStateBean.getPostStatus(), e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, null);
        }
    }

    /**
     * Get lifecycle state data for a particular uuid.
     *
     * @param uuid                                  Reference variable that maps lc data with external system.
     * @return                                      Life cycle state bean with all the required information
     * @throws LifecycleManagerDatabaseException    If failed to get lifecycle state data.
     */
    public LifecycleStateBean getLifecycleStateDataFromId(String uuid) throws LifecycleManagerDatabaseException {
        LifecycleStateBean lifecycleStateBean = new LifecycleStateBean();
        Connection connection = null;
        PreparedStatement prepStmt = null;
        PreparedStatement prepStmt2 = null;
        ResultSet rs = null;
        ResultSet rs2 = null;
        final String getLifecycleDataFromIdSql =
                "SELECT DATA.LC_NAME AS LIFECYCLE_NAME, DATA.LC_STATUS AS LIFECYCLE_STATUS FROM "
                        + "LC_DATA DATA WHERE DATA.LC_STATE_ID=?";

        final String getChecklistData =
                "SELECT CHECKLIST.CHECKLIST_NAME AS CHECKLIST_NAME, CHECKLIST.CHECKLIST_VALUE AS CHECKLIST_VALUE FROM "
                        + "LC_CHECKLIST_DATA CHECKLIST WHERE CHECKLIST.LC_STATE_ID=? AND CHECKLIST.LC_STATE=?";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            prepStmt = connection.prepareStatement(getLifecycleDataFromIdSql);
            prepStmt.setString(1, uuid);
            rs = prepStmt.executeQuery();
            if (rs.next()) {
                lifecycleStateBean.setLcName(rs.getString(Constants.LIFECYCLE_NAME));
                String lcState = rs.getString(Constants.LIFECYCLE_STATUS);
                lifecycleStateBean.setPostStatus(lcState);
                lifecycleStateBean.setStateId(uuid);

                prepStmt2 = connection.prepareStatement(getChecklistData);
                prepStmt2.setString(1, uuid);
                prepStmt2.setString(2, lcState);
                rs2 = prepStmt2.executeQuery();
                Map<String, Boolean> checkListData = new HashMap<>();
                while (rs2.next()) {
                    checkListData
                            .put(rs2.getString(Constants.CHECKLIST_NAME), rs2.getBoolean(Constants.CHECKLIST_VALUE));
                }
                lifecycleStateBean.setCheckListData(checkListData);
            } else {
                throw new LifecycleManagerDatabaseException("No state data associated with lifecycle id :" + uuid);
            }

        } catch (SQLException e) {
            handleException("Error while getting the lifecycle state data for id" + uuid, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt2, null, rs2);
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, rs);
        }
        return lifecycleStateBean;
    }

    /**
     * Method used to update lifecycle history tables. Invoked when association and updating lifecycle.
     *
     * @param id                            UUID of the lifecycle state. (Associates with asset)
     * @param previousState                 Current state.
     * @param postState                     Target state.
     * @param user                          The user associated with lifecycle operation.
     * @throws LifecycleManagerDatabaseException
     */
    private void addLifecycleHistory(String id, String previousState, String postState, String user) {
        if (!LifecycleConfigBuilder.getLifecycleConfig().isEnableHistory()) {
            return;
        }
        Connection connection = null;
        PreparedStatement prepStmt = null;
        final String insertLifecycleHistorySql = "INSERT INTO LC_HISTORY (LC_STATE_ID, PREVIOUS_STATE, "
                + "POST_STATE, USERNAME, UPDATED_TIME) VALUES (?,?,?,?,?)";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            connection.setAutoCommit(false);
            String dbProductName = connection.getMetaData().getDatabaseProductName();
            boolean returnsGeneratedKeys = LifecycleMgtDBUtil.canReturnGeneratedKeys(dbProductName);
            if (returnsGeneratedKeys) {
                prepStmt = connection.prepareStatement(insertLifecycleHistorySql, new String[] {
                        LifecycleMgtDBUtil.getConvertedAutoGeneratedColumnName(dbProductName, Constants.LC_ID) });
            } else {
                prepStmt = connection.prepareStatement(insertLifecycleHistorySql);
            }
            prepStmt.setString(1, id);
            prepStmt.setString(2, previousState);
            prepStmt.setString(3, postState);
            prepStmt.setString(4, user);
            prepStmt.setTimestamp(5, new Timestamp(System.currentTimeMillis()));
            prepStmt.execute();
            connection.commit();
        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for lifecycle history data insertion ", e);
            }
            log.error("Error while adding the lifecycle history ", e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, null);
        }
    }

    /**
     * Method used to get lifecycle history related to particular uuid.
     *
     * @param uuid                                  UUID of the lifecycle state. (Associates with asset)
     * @return                                      List of state transitions for given uuid.
     *
     * @throws LifecycleManagerDatabaseException
     */
    public List<LifecycleHistoryBean> getLifecycleHistoryFromId(String uuid) throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        ResultSet rs = null;
        List<LifecycleHistoryBean> lifecycleHistoryBeanList = new ArrayList<>();
        final String getLifecycleHistoryOfUuid = "SELECT PREVIOUS_STATE AS PREV_STATE, POST_STATE AS "
                + "POST_STATE, USERNAME AS USER, UPDATED_TIME AS TIME FROM LC_HISTORY WHERE LC_STATE_ID=? "
                + "ORDER BY UPDATED_TIME ASC";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            prepStmt = connection.prepareStatement(getLifecycleHistoryOfUuid);
            prepStmt.setString(1, uuid);
            rs = prepStmt.executeQuery();
            while (rs.next()) {
                LifecycleHistoryBean lifecycleHistoryBean = new LifecycleHistoryBean();
                lifecycleHistoryBean.setPreviousState(rs.getString(Constants.PREV_STATE));
                lifecycleHistoryBean.setPostState(rs.getString(Constants.POST_STATE));
                lifecycleHistoryBean.setUser(rs.getString(Constants.USER));
                lifecycleHistoryBean.setUpdatedTime(rs.getTimestamp(Constants.TIME));
                lifecycleHistoryBeanList.add(lifecycleHistoryBean);
            }
        } catch (SQLException e) {
            handleException("Error while getting lifecycle history for id : " + uuid, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, rs);
        }
        return lifecycleHistoryBeanList;
    }

    /**
     * Method used to remove lifecycle state data for a given id.
     *
     * @param uuid                                  UUID of the lifecycle state. (Associates with asset)
     * @throws LifecycleManagerDatabaseException
     */
    public void removeLifecycleState (String uuid) throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        final String removeLifecycleState = "DELETE FROM LC_DATA WHERE LC_STATE_ID=? ";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            connection.setAutoCommit(false);
            prepStmt = connection.prepareStatement(removeLifecycleState);
            prepStmt.setString(1, uuid);
            prepStmt.execute();
            connection.commit();
        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for lifecycle delete operation ", e);
            }
            handleException("Error while deleting the lifecycle id  " + uuid, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, null);
        }
    }

    /**
     * Method used to update data related to check list item operation.
     *
     * @param uuid                                  UUID of the lifecycle state. (Associates with asset)
     * @param lcState                               State in which the checklist is associated with.
     * @param checkListName                         Name of the check list in which operation was performed
     * @param value                                 Value of the check list item. (Selected or not selected)
     *
     * @throws LifecycleManagerDatabaseException
     */
    public void changeCheckListItemData(String uuid, String lcState, String checkListName, boolean value)
            throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt1 = null;
        PreparedStatement prepStmt2 = null;
        PreparedStatement prepStmt3 = null;
        ResultSet rs = null;
        final String checkListItemExist = "SELECT CHECKLIST.LC_ID FROM LC_CHECKLIST_DATA CHECKLIST WHERE"
                + " CHECKLIST.LC_STATE_ID=? AND CHECKLIST.LC_STATE=? AND CHECKLIST.CHECKLIST_NAME=?";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            prepStmt1 = connection.prepareStatement(checkListItemExist);
            prepStmt1.setString(1, uuid);
            prepStmt1.setString(2, lcState);
            prepStmt1.setString(3, checkListName);
            rs = prepStmt1.executeQuery();
            connection.setAutoCommit(false);
            if (rs.next()) {
                final String updateCheckListItemData = "UPDATE LC_CHECKLIST_DATA SET CHECKLIST_VALUE=? WHERE "
                        + "CHECKLIST.LC_STATE_ID=? AND CHECKLIST.LC_STATE=? AND CHECKLIST.CHECKLIST_NAME=?";

                prepStmt2 = connection.prepareStatement(updateCheckListItemData);
                prepStmt2.setBoolean(1, value);
                prepStmt2.setString(2, uuid);
                prepStmt2.setString(3, lcState);
                prepStmt2.setString(4, checkListName);
                prepStmt2.executeUpdate();
            } else {
                final String addCheckListItemData = "INSERT INTO LC_CHECKLIST_DATA (LC_STATE_ID, LC_STATE, "
                        + "CHECKLIST_NAME, CHECKLIST_VALUE) VALUES (?,?,?,?)";

                prepStmt3 = connection.prepareStatement(addCheckListItemData);
                prepStmt3.setString(1, uuid);
                prepStmt3.setString(2, lcState);
                prepStmt3.setString(3, checkListName);
                prepStmt3.setBoolean(4, value);
                prepStmt3.execute();
            }
            connection.commit();
        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for adding check list item data ", e);
            }
            handleException("Error while adding  checklist data for id " + uuid, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt1, null, rs);
            LifecycleMgtDBUtil.closeAllConnections(prepStmt2, null, null);
            LifecycleMgtDBUtil.closeAllConnections(prepStmt3, connection, null);
        }

    }

    /**
     * Method used to clear check list item data related to previous state when performing lifecycle state change
     * operation.
     *
     * @param uuid                                  UUID of the lifecycle state.
     * @param lcState                               State in which the checklist is associated with.
     *
     * @throws LifecycleManagerDatabaseException
     */
    public void clearCheckListItemData(String uuid, String lcState) throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        final String clearCheckListData = "UPDATE LC_CHECKLIST_DATA SET CHECKLIST_VALUE=? WHERE "
                + "LC_STATE_ID=? AND LC_STATE=?";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            connection.setAutoCommit(false);
            prepStmt = connection.prepareStatement(clearCheckListData);
            prepStmt.setBoolean(1, false);
            prepStmt.setString(2, uuid);
            prepStmt.setString(3, lcState);
            prepStmt.executeUpdate();
            connection.commit();
        } catch (SQLException e) {
            try {
                if (connection != null) {
                    connection.rollback();
                }
            } catch (SQLException e1) {
                log.error("Error while roll back operation for clearing checklist item data ", e);
            }
            handleException("Error while clearing  checklist data for id " + uuid + "and state " + lcState, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, null);
        }
    }

    /**
     * This method provides set of lifecycle ids in a particular state.
     * @param state`
     * @param lcName
     * @return  List of lifecycle ids in the given state.
     * @throws LifecycleManagerDatabaseException
     */
    public List<String> getLifecycleIdsFromState(String state, String lcName) throws LifecycleManagerDatabaseException {
        Connection connection = null;
        PreparedStatement prepStmt = null;
        ResultSet rs = null;
        List<String> lifecycleIdList = new ArrayList<>();
        final String getLifecycleIdsInState = "SELECT LC_STATE_ID AS ID FROM LC_DATA WHERE LC_STATUS =?"
                + " AND LC_NAME=?";
        try {
            connection = LifecycleMgtDBUtil.getConnection();
            prepStmt = connection.prepareStatement(getLifecycleIdsInState);
            prepStmt.setString(1, state);
            prepStmt.setString(2, lcName);
            rs = prepStmt.executeQuery();
            while (rs.next()) {
                lifecycleIdList.add(rs.getString(Constants.ID));
            }
        } catch (SQLException e) {
            handleException("Error while getting list of lifecycle ids in state" + state, e);
        } finally {
            LifecycleMgtDBUtil.closeAllConnections(prepStmt, connection, rs);
        }
        return lifecycleIdList;
    }

    private void handleException(String msg, Throwable t) throws LifecycleManagerDatabaseException {
        log.error(msg, t);
        throw new LifecycleManagerDatabaseException(msg, t);
    }

    private String generateUUID() {
        return UUID.randomUUID().toString().replaceAll("-", "");
    }

    /**
     * This is an inner class to hold the instance of the LCMgtDAO.
     * The reason for writing it like this is to guarantee that only one instance would be created.
     */
    private static class LCMgtDAOHolder {

        private static final LifecycleMgtDAO INSTANCE = new LifecycleMgtDAO();
    }
}
