<%
include("/jagg/jagg.jag");
var log = new Log();
(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, result,
            action = request.getParameter("action"),
            apiName = request.getParameter("apiName"),
            apiVersion = request.getParameter("apiVersion"),    
            appName = request.getParameter("appName"),
            fromDate = request.getParameter("fromDate"),
            toDate = request.getParameter("toDate"),
            site = require("/site/conf/site.json"),
            msg = require("/site/conf/ui-messages.jag"),
            allProviders = "__all_providers__";

    convertToDateObj = function (date) {
        var dateWithoutHour = date.split("\ ")[0].split("-");
        var year = dateWithoutHour[0];
        var month = dateWithoutHour[1] - 1;
        var day = dateWithoutHour[2];
        return new Date(year,month,day);
    }

    dayDiff = function (fromDate,toDate){
        fromDate = convertToDateObj(fromDate);
        toDate = convertToDateObj(toDate);
        return (toDate - fromDate)/(1000*60*60*24);
    }

    if (jagg.getUser() == null) {
        print({
            error: true,
            message: 'AuthenticateError'
        });
    } else {        
        var provider = jagg.getUser().username;
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var tenantDomain = MultitenantUtils.getTenantDomain(provider);
        var APIUsageStatisticsClient = Packages.org.wso2.carbon.apimgt.usage.client.APIUsageStatisticsClient;
        var usageStatClient;

        var currentLocation = request.getParameter("currentLocation");
        if (currentLocation != null && currentLocation.indexOf("all-statistics") >= 0) {
            provider = allProviders;
        }

        if (provider.indexOf("@") == -1) {
            provider = provider + "@" + tenantDomain;
        }

        if (action === "getThrottleDataOfAPIAndApplication") {     

            if(apiName &&  fromDate && toDate){

                var groupBy = "hour";
                var timeUnitMili = 1000 * 60 * 60;
                var data = {};

                if (dayDiff(fromDate, toDate) > 3){
                    groupBy = "day";
                    timeUnitMili = 1000 * 60 * 60 * 24;
                }

                try {
                    usageStatClient = new APIUsageStatisticsClient(provider);
                    var throttleData = usageStatClient.getThrottleDataOfAPIAndApplication(apiName,provider,appName,fromDate,toDate,groupBy);
                    var result = [];

                    for (var i = 0; i < throttleData.size(); i++) {
                        var throttleDataObj = throttleData.get(i);
                        result.push({
                            time : throttleDataObj.getTime(),
                            success_request_count : throttleDataObj.getSuccessRequestCount(),
                            throttleout_count : throttleDataObj.getThrottleOutCount()
                        });
                    }

                    data.result = result;
                    data.groupBy = groupBy;
                    data.timeUnitMili = timeUnitMili;
                    print({
                        error: false,
                        usage: data
                    });
                } catch (e) {
                    log.error(e);
                    print({
                        error: true,
                        message: "Error in retrieving throttle data over time for API: " + apiName
                    });
                }

            }else{
                print({
                    error: true,
                    message: 'Please provide at least API Name, From date and To date'
                });
            }

        } else if (action === "getAPIsForThrottleStats") {

            try {
                usageStatClient = new APIUsageStatisticsClient(provider);
                var apis = usageStatClient.getAPIsForThrottleStats(provider);
                var result = [];

                for (var i = 0; i < apis.size(); i++) {
                    result.push(apis.get(i));
                }

                print({
                    error: false,
                    usage: result
                });
            } catch (e) {
                log.error(e);
                print({
                    error: true,
                    message: "Error in retrieving API names for throttle stats"
                });
            }

        } else if (action === "getFirstAccessTime") {

            mod = jagg.module("statistics");
            provider = jagg.getUser().username;
            if (currentLocation.indexOf("all-statistics") >= 0) {
                result = mod.getFirstAccessTime(allProviders);
            } else {
                result = mod.getFirstAccessTime(provider);
            }
            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        } else if (action === "isDataPublishingEnabled") {

            mod = jagg.module("statistics");
            result = mod.isDataPublishingEnabled();

            if (result.error == "true") {
                obj = {
                    error: result.error,
                    message: msg.error.backendError(action)
                };
            } else {
                obj = {
                    error: false,
                    usage: result.usage
                }
            }
            print(obj);

        };
    }

}());
%>
